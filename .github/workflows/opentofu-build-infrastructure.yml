name: "OpenTofu Build Infrastructure"

on:
  workflow_call:
    inputs:
      opentofu-version:
        required: false
        type: string
        default: "1.7.2"
      infrastructure-directory:
        required: false
        type: string
        default: "./infrastructure"
      environment:
        required: false
        type: string
        default: "default"
      project-name:
        required: true
        type: string
      backend-resource-group-name:
        required: true
        type: string
      backend-storage-account-name:
        required: true
        type: string
      backend-container-name:
        required: false
        type: string
        default: "tfstate"
      retention-days:
        required: false
        type: number
        default: 1
    secrets:
      AZURE_CREDENTIALS:
        description: |
          A JSON object containing Azure Service Principal credentials.
          {
            "clientId": "********",
            "clientSecret": "********",
            "subscriptionId": "********",
            "tenantId": "********"
          }
        required: true
    outputs:
      tofu-outputs:
        description: "A JSON string containing all OpenTofu outputs."
        value: ${{ jobs.opentofu-apply.outputs.tofu-outputs }}
      tofu-outputs-b64:
        description: "Base64 of full OpenTofu outputs JSON (may contain sensitive values)."
        value: ${{ jobs.opentofu-apply.outputs.tofu-outputs-b64 }}

jobs:
  opentofu-plan:
    name: "OpenTofu Plan"
    runs-on: "ubuntu-latest"
    env:
      TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.tofu-plugin-cache
      TF_IN_AUTOMATION: "true"
    outputs:
      plan-exitcode: ${{ steps.plan.outputs.exitcode }}
      plan-text: ${{ steps.plan.outputs.plan_text }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup OpenTofu"
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ inputs.opentofu-version }}
          tofu_wrapper: false

      - name: "Azure CLI Login"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Prepare plugin cache directory"
        run: mkdir -p "$TF_PLUGIN_CACHE_DIR"

      - name: "Cache OpenTofu plugin cache"
        uses: actions/cache@v4
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: tofu-plugins-${{ hashFiles(format('{0}/.terraform.lock.hcl', inputs.infrastructure-directory)) }}
          restore-keys: |
            tofu-plugins-

      - name: "Initialize and Select Workspace"
        env:
          ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
        working-directory: ${{ inputs.infrastructure-directory }}
        run: |
          mkdir -p "$TF_PLUGIN_CACHE_DIR"
          rm -f .terraform/environment || true
          tofu init -reconfigure -input=false \
            -backend-config="resource_group_name=${{ inputs.backend-resource-group-name }}" \
            -backend-config="storage_account_name=${{ inputs.backend-storage-account-name }}" \
            -backend-config="container_name=${{ inputs.backend-container-name }}" \
            -backend-config="key=${{ inputs.project-name }}.tfstate"
          
          if [ "${{ inputs.environment }}" != "default" ]; then
            tofu workspace select ${{ inputs.environment }} || tofu workspace new ${{ inputs.environment }}
          fi

      - name: "Check State"
        id: state
        working-directory: ${{ inputs.infrastructure-directory }}
        run: |
          if tofu state list > /dev/null 2>&1; then
            echo "empty=false" >> $GITHUB_OUTPUT
          else
            echo "empty=true" >> $GITHUB_OUTPUT
          fi

      - name: "OpenTofu Validate"
        env:
          ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
        working-directory: ${{ inputs.infrastructure-directory }}
        run: tofu validate

      - name: "OpenTofu Plan"
        id: plan
        env:
          ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
        working-directory: ${{ inputs.infrastructure-directory }}
        run: |
          if tofu plan -detailed-exitcode -no-color -out=tfplan > plan.txt; then
            exit_code=0
          else
            exit_code=$?
          fi

          echo "exitcode=${exit_code}" >> $GITHUB_OUTPUT
          
          delimiter=$(uuidgen)
          echo "plan_text<<$delimiter" >> $GITHUB_OUTPUT
          cat plan.txt >> $GITHUB_OUTPUT
          echo "$delimiter" >> $GITHUB_OUTPUT

          # Exit with 1 if the plan had a real error
          if [ "${exit_code}" -eq 1 ]; then
            cat plan.txt
            exit 1
          fi

      - name: "Upload OpenTofu Plan"
        uses: actions/upload-artifact@v4
        with:
          name: "opentofu-plan-${{ inputs.project-name }}-${{ inputs.environment || 'default' }}-${{ github.run_id }}"
          path: ${{ inputs.infrastructure-directory }}/tfplan
          retention-days: ${{ inputs.retention-days }}

  opentofu-apply:
    needs: [ "opentofu-plan" ]
    name: "OpenTofu Apply"
    runs-on: "ubuntu-latest"
    env:
      TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.tofu-plugin-cache
      TF_IN_AUTOMATION: "true"
    environment: ${{ inputs.environment }}
    outputs:
      tofu-outputs: ${{ steps.outputs.outputs.json }}
    steps:
      - name: "Show Plan Output"
        run: |
          echo "--- OpenTofu Plan Text Output ---"
          echo "${{ needs.opentofu-plan.outputs.plan-text }}"
          echo "---------------------------------"

      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup OpenTofu"
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ inputs.opentofu-version }}
          tofu_wrapper: false

      - name: "Azure CLI Login"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Prepare plugin cache directory"
        run: mkdir -p "$TF_PLUGIN_CACHE_DIR"

      - name: "Cache OpenTofu plugin cache"
        uses: actions/cache@v4
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: tofu-plugins-${{ hashFiles(format('{0}/.terraform.lock.hcl', inputs.infrastructure-directory)) }}
          restore-keys: |
            tofu-plugins-

      - name: "Download OpenTofu Plan"
        uses: actions/download-artifact@v4
        with:
          name: "opentofu-plan-${{ inputs.project-name }}-${{ inputs.environment || 'default' }}-${{ github.run_id }}"
          path: ${{ inputs.infrastructure-directory }}

      - name: "Initialize and Select Workspace"
        env:
          ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
        working-directory: ${{ inputs.infrastructure-directory }}
        run: |
          mkdir -p "$TF_PLUGIN_CACHE_DIR"
          rm -f .terraform/environment || true
          tofu init -reconfigure -input=false \
            -backend-config="resource_group_name=${{ inputs.backend-resource-group-name }}" \
            -backend-config="storage_account_name=${{ inputs.backend-storage-account-name }}" \
            -backend-config="container_name=${{ inputs.backend-container-name }}" \
            -backend-config="key=${{ inputs.project-name }}.tfstate"
          
          if [ "${{ inputs.environment }}" != "default" ]; then
            tofu workspace select ${{ inputs.environment }} || tofu workspace new ${{ inputs.environment }}
          fi

      - name: "OpenTofu Apply"
        if: needs.opentofu-plan.outputs.plan-exitcode == 2 || steps.state.outputs.empty == 'true'
        env:
          ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
        working-directory: ${{ inputs.infrastructure-directory }}
        run: |
          if [ "${{ steps.state.outputs.empty }}" = "true" ] && [ "${{ needs.opentofu-plan.outputs.plan-exitcode }}" != "2" ]; then
            tofu apply -input=false -auto-approve
          else
            tofu apply -input=false -auto-approve tfplan
          fi

      - name: "Diagnose State and Outputs"
        if: always()
        env:
          ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
        working-directory: ${{ inputs.infrastructure-directory }}
        run: |
          echo "--- Workspace ---"
          tofu workspace show || true
          echo "\n--- All Workspaces ---"
          tofu workspace list || true
          echo "\n--- State Resources ---"
          tofu state list || echo "(no resources in state)"
          echo "\n--- Output Keys ---"
          tofu output -json 2>/dev/null | jq -r 'keys_unsorted[]?' || echo "(no outputs)"
          echo "------------------------"

      - name: "Show State"
        if: always()
        env:
          ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
        working-directory: ${{ inputs.infrastructure-directory }}
        run: |
          echo "--- OpenTofu State Inspection ---"
          tofu show
          echo "---------------------------------"

      - name: "Get OpenTofu Outputs"
        id: outputs
        env:
          ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
        working-directory: ${{ inputs.infrastructure-directory }}
        run: |
          echo "--- Debugging OpenTofu Outputs ---"
          output_keys=$(tofu output -json | jq -r 'keys_unsorted | @sh')
          for key in $output_keys; do
            value=$(tofu output -raw "${key//\'/}")
            echo "::add-mask::${value}"
            echo "Output '${key//\'/}': found with length ${#value}"
          done
          echo "-----------------------------------"

          delimiter=$(uuidgen)
          echo "json<<$delimiter" >> $GITHUB_OUTPUT
          # Ensure valid JSON is always emitted even if state/outputs are absent
          if ! tofu output -json > .tofu_outputs.json 2>/dev/null; then
            echo '{}' > .tofu_outputs.json
          fi
          cat .tofu_outputs.json >> $GITHUB_OUTPUT
          echo "$delimiter" >> $GITHUB_OUTPUT