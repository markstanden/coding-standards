name: "OpenTofu Build Infrastructure"

on:
  workflow_call:

    inputs:
      opentofu-version:
        description: "OpenTofu version to use for infrastructure operations"
        type: string
        required: false
        default: "1.7.2"
      output-artifact-name:
        description: "Name of the uploaded OpenTofu outputs artifact"
        type: string
        required: true
      tofu-wrapper:
        description: "Whether to enable OpenTofu wrapper for enhanced CI/CD output"
        type: boolean
        required: false
        default: false
      cache-key-prefix:
        description: "Cache key prefix for OpenTofu plugin caching"
        type: string
        required: false
        default: "tofu-plugins"
      terraform-lock-file:
        description: "Name of the Terraform/OpenTofu lock file used in cache key generation"
        type: string
        required: false
        default: ".terraform.lock.hcl"
      output-json-filename:
        description: "Filename for the OpenTofu outputs JSON file"
        type: string
        required: false
        default: "tofu_outputs.json"
      infrastructure-directory:
        description: "Path to the infrastructure code directory from project root"
        type: string
        required: false
        default: "infrastructure"
      environment:
        description: "Target environment (e.g., staging, production, default)"
        type: string
        required: false
        default: "default"
      project-name:
        description: "Project name used throughout in resource naming and state file keys"
        type: string
        required: true
      backend-resource-group-name:
        description: "Azure resource group name containing the Terraform state storage"
        type: string
        required: true
      backend-storage-account-name:
        description: "Azure storage account name for Terraform state backend"
        type: string
        required: true
      backend-container-name:
        description: "Azure storage container name for Terraform state files"
        type: string
        required: false
        default: "tfstate"
      retention-days:
        description: "Number of days to retain workflow artifacts"
        type: number
        required: false
        default: 1
      require-approval:
        description: "Whether to require manual approval before apply"
        type: boolean
        required: false
        default: false
      debug-output:
        description: "Enable verbose debug output to aid troubleshooting"
        type: boolean
        required: false
        default: false

    secrets:
      AZURE_CREDENTIALS:
        description: |
          A JSON object containing Azure Service Principal credentials.
          {
            "clientId": "********",
            "clientSecret": "********",
            "subscriptionId": "********",
            "tenantId": "********"
          }
        required: true

jobs:
  opentofu-plan:
    name: "OpenTofu Plan"
    runs-on: "ubuntu-latest"
    env:
      TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.tofu-plugin-cache
      TF_IN_AUTOMATION: "true"
      ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS)['clientId'] }}
      ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS)['clientSecret'] }}
      ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS)['subscriptionId'] }}
      ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS)['tenantId'] }}
    outputs:
      plan-exitcode: ${{ steps.plan.outputs.exitcode }}
      plan-text: ${{ steps.plan.outputs.plan_text }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup OpenTofu"
        uses: opentofu/setup-opentofu@000eeb8522f0572907c393e8151076c205fdba1b
        with:
          tofu_version: ${{ inputs.opentofu-version }}
          tofu_wrapper: ${{ inputs.tofu-wrapper }}

      - name: "Azure CLI Login"
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Prepare plugin cache directory"
        run: mkdir -p "$TF_PLUGIN_CACHE_DIR"

      - name: "Cache OpenTofu plugin cache"
        uses: actions/cache@v4
        continue-on-error: true
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: ${{ inputs.cache-key-prefix }}-${{ hashFiles(format('{0}/{1}', inputs.infrastructure-directory, inputs.terraform-lock-file)) }}
          restore-keys: |
            ${{ inputs.cache-key-prefix }}-

      - name: "Initialize and Select Workspace"
        working-directory: ${{ inputs.infrastructure-directory }}
        env:
          BUILD_ENV: ${{ inputs.environment }}
        run: |
          mkdir -p "$TF_PLUGIN_CACHE_DIR"
          rm -f .terraform/environment || true
          tofu init -reconfigure -input=false \
            -backend-config="resource_group_name=${{ inputs.backend-resource-group-name }}" \
            -backend-config="storage_account_name=${{ inputs.backend-storage-account-name }}" \
            -backend-config="container_name=${{ inputs.backend-container-name }}" \
            -backend-config="key=${{ inputs.project-name }}.tfstate"
          
          if [ "$BUILD_ENV" != "default" ]; then
            tofu workspace select $BUILD_ENV || tofu workspace new $BUILD_ENV
          fi

      - name: "Check State"
        id: state
        working-directory: ${{ inputs.infrastructure-directory }}
        run: |
          if tofu state list > /dev/null 2>&1; then
            echo "empty=false" >> $GITHUB_OUTPUT
          else
            echo "empty=true" >> $GITHUB_OUTPUT
          fi

      - name: "OpenTofu Validate"
        working-directory: ${{ inputs.infrastructure-directory }}
        run: tofu validate

      - name: "OpenTofu Plan"
        id: plan
        working-directory: ${{ inputs.infrastructure-directory }}
        run: |
          # OpenTofu plan returns exit codes:
          #   0 = Success, no changes (infrastructure matches desired state)
          #   1 = Error occurred (validation/configuration issues)
          #   2 = Success, changes detected (plan created successfully)
          if tofu plan -detailed-exitcode -no-color -out=tfplan > plan.txt; then
            exit_code=0
          else
            exit_code=$?
          fi
          
          # Store exit code for downstream jobs to check
          echo "exitcode=${exit_code}" >> $GITHUB_OUTPUT
          
          # Capture plan output for PR comments/debugging using heredoc delimiter
          delimiter=$(uuidgen)
          echo "plan_text<<$delimiter" >> $GITHUB_OUTPUT
          cat plan.txt >> $GITHUB_OUTPUT
          echo "$delimiter" >> $GITHUB_OUTPUT
          
          # Fail the workflow only on genuine errors (exit code 1)
          # Exit codes 0 and 2 are both successful plan scenarios
          if [ "${exit_code}" -eq 1 ]; then
            cat plan.txt
            exit 1
          fi

      - name: "Upload OpenTofu Plan"
        uses: actions/upload-artifact@v4
        with:
          name: "opentofu-plan-${{ inputs.project-name }}-${{ inputs.environment || 'default' }}-${{ github.run_id }}"
          path: ${{ inputs.infrastructure-directory }}/tfplan
          retention-days: ${{ inputs.retention-days }}

  opentofu-apply:
    needs: [ "opentofu-plan" ]
    name: "OpenTofu Apply"
    runs-on: "ubuntu-latest"
    env:
      TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.tofu-plugin-cache
      TF_IN_AUTOMATION: "true"
      ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS)['clientId'] }}
      ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS)['clientSecret'] }}
      ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS)['subscriptionId'] }}
      ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS)['tenantId'] }}
    environment: ${{ inputs.environment }}
    steps:
      - name: "Show Plan Output"
        run: |
          echo "--- OpenTofu Plan Text Output ---"
          echo "${{ needs.opentofu-plan.outputs.plan-text }}"
          echo "---------------------------------"

      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup OpenTofu"
        uses: opentofu/setup-opentofu@000eeb8522f0572907c393e8151076c205fdba1b
        with:
          tofu_version: ${{ inputs.opentofu-version }}
          tofu_wrapper: ${{ inputs.tofu-wrapper }}

      - name: "Azure CLI Login"
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Prepare plugin cache directory"
        run: mkdir -p "$TF_PLUGIN_CACHE_DIR"

      - name: "Cache OpenTofu plugin cache"
        uses: actions/cache@v4
        continue-on-error: true
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: ${{ inputs.cache-key-prefix }}-${{ hashFiles(format('{0}/{1}', inputs.infrastructure-directory, inputs.terraform-lock-file)) }}
          restore-keys: |
            ${{ inputs.cache-key-prefix }}-

      - name: "Download OpenTofu Plan"
        uses: actions/download-artifact@v4
        with:
          name: "opentofu-plan-${{ inputs.project-name }}-${{ inputs.environment || 'default' }}-${{ github.run_id }}"
          path: ${{ inputs.infrastructure-directory }}

      - name: "Initialize and Select Workspace"
        working-directory: ${{ inputs.infrastructure-directory }}
        env:
          BUILD_ENV: ${{ inputs.environment }}
        run: |
          mkdir -p "$TF_PLUGIN_CACHE_DIR"
          rm -f .terraform/environment || true
          tofu init -reconfigure -input=false \
            -backend-config="resource_group_name=${{ inputs.backend-resource-group-name }}" \
            -backend-config="storage_account_name=${{ inputs.backend-storage-account-name }}" \
            -backend-config="container_name=${{ inputs.backend-container-name }}" \
            -backend-config="key=${{ inputs.project-name }}.tfstate"
          
          if [ "$BUILD_ENV" != "default" ]; then
            tofu workspace select $BUILD_ENV || tofu workspace new $BUILD_ENV
          fi

      - name: "OpenTofu Apply"
        if: needs.opentofu-plan.outputs.plan-exitcode == 2 || steps.state.outputs.empty == 'true'
        run: |
          if [ "${{ steps.state.outputs.empty }}" = "true" ] && [ "${{ needs.opentofu-plan.outputs.plan-exitcode }}" != "2" ]; then
            tofu apply -input=false -auto-approve
          else
            tofu apply -input=false -auto-approve tfplan
          fi

      - name: "Diagnose State and Outputs"
        if: always()
        working-directory: ${{ inputs.infrastructure-directory }}
        run: |
          echo "--- Current Workspace ---"
          tofu workspace show || true
          echo " "
          echo "--- All Workspaces ---"
          tofu workspace list || true
          echo " "
          echo "--- Managed Resources ---"
          tofu state list || echo "(no resources in state)"
          echo " "
          echo "--- Output Keys ---"
          tofu output -json 2>/dev/null | jq -r 'keys_unsorted[]?' || echo "(no outputs)"
          echo " "

      - name: "Show State"
        if: always()
        working-directory: ${{ inputs.infrastructure-directory }}
        run: |
          echo "--- OpenTofu State Inspection ---"
          tofu show

      - name: "Get OpenTofu Outputs"
        id: outputs
        working-directory: ${{ inputs.infrastructure-directory }}
        run: |
          echo "--- Creating OpenTofu Output Artifact ---"

          echo "Working directory: $(pwd)"

          echo "Obtaining keys..."
          output_keys=$(tofu output -json | jq -r 'keys_unsorted | @sh')

          echo "Masking sensitive values..."
          for key in $output_keys; do
            value=$(tofu output -raw "${key//\'/}")
            echo "::add-mask::${value}"
            echo "Output '${key//\'/}': found with length ${#value}"
          done

          echo "Saving outputs to artifact..."

          if ! tofu output -json > ${{ inputs.output-json-filename }} 2>/dev/null; then
            echo '{}' > ${{ inputs.output-json-filename }}
          fi

          echo "Artifact ready for upload."

      - name: "Verify outputs file"
        working-directory: ${{ inputs.infrastructure-directory }}
        run: |
          if [ -f ${{ inputs.output-json-filename }} ]; then
            echo "File found. Contents:"
            cat ${{ inputs.output-json-filename }}
            echo ""
            echo "File size: $(wc -c < ${{ inputs.output-json-filename }}) bytes"
          else
            echo "ERROR: File does not exist"
            exit 1
          fi

      - name: "Upload OpenTofu Outputs"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.output-artifact-name }}
          path: ${{ inputs.infrastructure-directory }}/${{ inputs.output-json-filename }}
          retention-days: ${{ inputs.retention-days }}
