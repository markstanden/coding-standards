name: SonarQube
on:
  workflow_call:
    inputs:
      dotnet-version:
        required: false
        type: string
        default: "8.0.x"
        description: ".NET SDK version to use"
      sonar-project-key:
        required: true
        type: string
        description: "SonarQube project key"
      sonar-organization:
        required: true
        type: string
        description: "SonarQube organization"
    secrets:
      SONAR_TOKEN:
        required: true
        description: "SonarQube token"

jobs:
  build:
    name: "Build and analyze"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Set up JDK 17"
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu"
      
      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: "Setup .NET"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
  
      - name: "Cache SonarQube Cloud packages"
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: "Cache SonarQube Cloud scanner"
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: "Install SonarQube Cloud scanner"
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: "Build and analyze"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"${{ inputs.sonar-project-key }}" /o:"${{ inputs.sonar-organization }}" /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          dotnet build
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"